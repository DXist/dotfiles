" GENERAL {{{1
" Note: Skip initialization for vim-tiny or vim-small.
if 0 | endif

if has('vim_starting')
	set nocompatible               " Be iMproved

	" for local host overrides
	set runtimepath+=~/.config/nvim/.overrides/

	call plug#begin('~/.config/nvim/plugged')

	" Plug 'Shougo/vimproc.vim', {'do' : 'make'}
	Plug 'Shougo/denite.nvim'

	Plug 'mhinz/vim-hugefile'
	Plug 'tpope/vim-fugitive'
	" syntax files for git
	Plug 'gregsexton/gitv', {'on': ['Gitv']}
	Plug 'tpope/vim-dispatch'
	Plug 'tpope/vim-repeat'
	Plug 'tpope/vim-surround'
	" Plug 'tpope/vim-eunuch'
	Plug 'tpope/vim-unimpaired'
	Plug 'tpope/vim-commentary'
	Plug 'tpope/vim-ragtag'
	Plug 'tpope/vim-vinegar'
	Plug 'janko-m/vim-test'
	" Plug 'christoomey/vim-tmux-runner'
	" let g:VtrStripLeadingWhitespace = 0
	" let g:VtrClearEmptyLines = 0
	" let g:VtrAppendNewline = 1

	Plug 'jmcantrell/vim-virtualenv'
	Plug 'altercation/vim-colors-solarized'
	" Plug 'scrooloose/syntastic'
	Plug 'neomake/neomake'
	Plug 'bkad/CamelCaseMotion'
	Plug 'Lokaltog/vim-easymotion'
	Plug 'Raimondi/delimitMate'
	Plug 'Valloric/YouCompleteMe', {'do': './install.py --gocode-completer'}
	Plug 'michaeljsmith/vim-indent-object'
	" Plug 'xolox/vim-misc'
	" Plug 'xolox/vim-session'
	Plug 'thinca/vim-template'
	Plug 'me-vlad/spellfiles.vim'
	" broken in my configuration
	Plug 'SirVer/ultisnips'
	Plug 'honza/vim-snippets'
	Plug 'benatkin/vim-move-between-tabs'
	Plug 'ConradIrwin/vim-bracketed-paste'
	Plug 'godlygeek/tabular'

	" optional plugins
	" Vim plugin that displays tags in a window, ordered by class etc.
	Plug 'majutsushi/tagbar', { 'on': ['TagbarToggle']}

	" filetypes
	Plug 'hynek/vim-python-pep8-indent', {'for': ['python']}

	Plug 'pangloss/vim-javascript', { 'for': ['javascript']}

	Plug 'othree/html5.vim', {'for': ['html', 'xhtml', 'css']}

	Plug 'fatih/vim-go', {'for': ['go']}

	Plug 'chase/vim-ansible-yaml', {'for': ['yaml', 'ansible']}
	" Plug 'pearofducks/ansible-vim'
	Plug 'szw/vim-ctrlspace'
	" Plug 'airblade/vim-rooter'
	Plug 'mattn/emmet-vim', {'for': ['html', 'xhtml']}
	Plug 'ekalinin/Dockerfile.vim', {'for': ['Dockerfile']}
	Plug 'fisadev/vim-isort', {'for': ['python']}
	Plug 'Glench/Vim-Jinja2-Syntax', {'for': ['j2', 'html']}

	call plug#end()

	" Required:
	" filetype plugin indent on

	" syntax on
	" enable modeline
	set modeline
	" allow perdirectory rc-files
	set exrc
	set secure
endif

set history=1000
"}}}

" VIM user interface {{{1
" statusline по умолчанию
if &statusline == ''
	set statusline=%<%f\ %y\ %h%m%r%=%-14.(%l,%c%V%)\ %P
endif

" статус - 2 строка снизу
set laststatus=2

set ttyfast
if v:version>=703
	set relativenumber
endif
set showcmd

" Enable mouse usage (all modes)
set mouse=a
if !has('nvim')
	set ttymouse=xterm2
" make test commands execute using dispatch.vim
endif

if has('nvim')
	let test#strategy = 'neovim'
	tnoremap <Esc> <C-\><C-n>
endif

" change window header to titlestring
set title
" nocursorline in insert mode
set cursorline
augroup insert_cursor
	autocmd!
	autocmd InsertEnter * set nocursorline
	autocmd InsertLeave * set cursorline
augroup END

set visualbell              " mute error bell"
set scrolloff=10             " min 10 symbols bellow cursor"
set linebreak               " break lines by words"
" новое окно помещаем справа от текущего
set splitright
set previewheight=25

" SEARCH
" игнорируем case, если шаблон в нижнем регистре
set ignorecase
set smartcase
" ищем в процессе набора
set incsearch
" подсветка найденных соответствий
set hlsearch
set showmatch               " Show matching brackets

" wildmenu
set wildmenu
set wildignore=*.o,.git,*.swp,*.swo,*~,*.pyc,build,*.egg,*.egg/*,*.egg-info/*,dist,deb_dist,pyshared,.tox,.env
set wildcharm=<C-Z>
source $VIMRUNTIME/menu.vim

"}}}

" COLORS {{{1
" тёмный фон
set bg=dark
silent! colorscheme solarized
let g:solarized_termtrans =1
" переключение background
if exists("togglebg")
	call togglebg#map("<F6>")
endif

let python_highlight_all = 1
" Highlight leading tabs
match SpecialKey /^\t\+/
"}}}

" FILES, BACKUPS, BUFFERS, SAVING {{{1
" keep a backup file
set backup
" бэкапы и swap-файлы храним во временной директории
set backupdir=~/.config/nvim/backup/,/tmp
set directory=~/.config/nvim/tmp/,/tmp

set hidden					" hide buffers when they are abandoned
set autoread				" auto reload externally changed files
" Save current open file when window focus is lost
"au FocusLost * if &modifiable && &modified | write | endif

function! RemoveTrailingWhitespace()
	let filetypes_to_exclude = ["diff", "markdown", "qf", "help"]
	if index(filetypes_to_exclude, &ft) == -1
		let b:curcol = col(".")
		let b:curline = line(".")
		" отсекаем неэкранированные пробелы на конце при сохранении
		silent! %s/\(\\\)\@<!\s\+$//e
		" пустые строки в конце файла
		"silent! %s/\(\s*\n\)\+\%$//
		call cursor(b:curline, b:curcol)
	endif
endfunction

augroup group_general
	autocmd!
	autocmd BufWritePre * call RemoveTrailingWhitespace()
	" автообновление настроек
	autocmd BufWritePost .vimrc.global source ~/.config/nvim/.vimrc.global
	" автообновление проектов
	autocmd BufWritePost projects.vim source ~/.config/nvim/projects.vim
	autocmd! BufWritePost * Neomake
augroup END

" Useful for copy
nmap <Leader>z :call <SID>zoom_window()<cr>
function! s:zoom_window()
	tabedit %
	setlocal foldcolumn=0 norelativenumber
endfunction

" netrw
let g:netrw_localcopycmd = '/bin/cp'
let g:netrw_liststyle = 3
let g:netrw_preview = 1
let g:netrw_altv = 1
"}}}

" LOCALIZATION {{{1
" удобно при наборе русских текстов
set keymap=russian-jcukenwin
if v:version>=703 || (v:version == 702 && has("patch109"))
	" нужна поддержка unicode langmap
	set langmap=йq,цw,уe,кr,еt,нy,гu,шi,щo,зp,х[,ъ],фa,ыs,вd,аf,пg,рh,оj,лk,дl,ж\\;,э',яz,чx,сc,мv,иb,тn,ьm,б\\,,ю.,ё`,ЙQ,ЦW,УE,КR,ЕT,НY,ГU,ШI,ЩO,ЗP,Х\{,Ъ\},ФA,ЫS,ВD,АF,ПG,РH,ОJ,ЛK,ДL,Ж\:,Э\",ЯZ,ЧX,СC,МV,ИB,ТN,ЬM,Б\<,Ю\>,Ё~
endif
set spelllang=en,ru
set langmenu=none            " Always use english menu
"Кодировки файлов
set fileencodings=utf-8,cp1251,koi8-r,cp866
"lmap is off and IM is off
set iminsert=0               " English by default"
set imsearch=0
"}}}

" TEXT EDITING {{{1
set textwidth=0
" allow backspacing over everything in insert mode
set backspace=indent,eol,start
set smarttab
set tabstop=4
set shiftwidth=4
set shiftround
set softtabstop=-1 " the same value as shiftwidth
set autoindent              " copy indent from previous line
" замена всех соответствий
set gdefault

" formatting
map Q gq

" Undo
if has('persistent_undo')
	set undodir=~/.config/nvim/tmp/,/tmp
	set undofile				" enable persistent undo
endif

"diff
set diffopt+=vertical
nmap dgl :diffget //2<CR>:diffupdate<CR>
nmap dgr :diffget //3<CR>:diffupdate<CR>

" для различения уровня отступов
set listchars=tab:\ \ ,trail:·,extends:⋯,precedes:⋯,nbsp:~
set list

""}}}

" FOLDING - сворачивание {{{1
if has('folding')
	" set foldcolumn=3
	set fdn=2
	set fml=15
	set foldopen+=insert
endif
"}}}
" COMPLETION {{{1
" учитываем case при дополнении
set infercase
" дополнение тега и имени файла
inoremap ^] ^X^]
inoremap ^F ^X^F

" longest option behaves wierd when common match is short
set completeopt=menuone

" blinking in Neovim 'User defined completion' drives me crazy
set shortmess+=c

" Enable omni completion.
augroup group_css
	au!
	autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
augroup END

" use htmldjango instead of html
augroup group_htmldjango
	au!
	autocmd FileType html set filetype=htmldjango
augroup END

augroup group_html
	au!
	autocmd FileType html,htmldjango,markdown setlocal omnifunc=htmlcomplete#CompleteTags
augroup END

augroup group_xml
	au!
	autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
augroup END

augroup group_c
	au!
	autocmd FileType c,cpp nnoremap <buffer> <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
	autocmd FileType c,cpp nnoremap <buffer> <leader>jf :YcmCompleter GoToDeclaration<CR>
augroup END

augroup group_python


"YouCompleteMe conflicts with delimitMate]
let g:ycm_key_list_previous_completion = ['<Up>']
"}}}

" PROJECTS {{{1
if filereadable(expand('~/.config/nvim/projects.vim'))
	source ~/.config/nvim/projects.vim
endif
" }}}

" MAPPINGS {{{1
" GENERAL {{{2
let mapleader = ","

" Fast saving
nmap <leader>s :w<cr>
nmap <leader>x :silent w !sudo tee %<cr>:e!<cr>
"Tab in visual mode
xmap <Tab> >gv
xmap <S-Tab> <gv
" key mapping for tab navigation
nmap <C-n> gt
nmap <C-p> gT
" key mapping for keymap switch
"imap <Tab> <C-^>

" clear search highlight
nmap <silent> <leader>h :silent :nohlsearch<CR>
" Command mode {{{
" ------------

	" Allow command line editing like emacs
	cnoremap <C-A>      <Home>
	cnoremap <C-B>      <Left>
	cnoremap <C-D>      <Del>
	cnoremap <C-F>      <Right>
	cnoremap <Esc>b <S-Left>
	cnoremap <Esc>f <S-Right>
	cnoremap <Esc>d <S-Right><C-W>

" }}}
" Paste mode
set pastetoggle=<F2>
map <F3> :set nowrap!<CR>
" Подсветка подозрительных аналогов ascii символов
map <F4> /[соех]<CR>
" Перенос строки без разбития аргументов
"map <F4> <ESC>80\|T,s<CR><ESC>
" Обновление .vimrc.global
map <F5> <ESC>: source ~/.vim/.vimrc.global<CR>
" Fast editing of the .vimrc
map <Leader>v :e! ~/.vim/.vimrc.global<CR>
map <Leader>vp :e ~/.vim/projects.vim<CR>
"}}}

" WINDOWS {{{2
" Window movement
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

set switchbuf=usetab
"}}}

" PLUGINS {{{2
" Session.vim
let g:session_autosave = "yes"
let g:session_autosave_periodic = 5
" expand sym links
let g:session_directory = resolve(expand("~/.vim/sessions"))
let g:session_lock_directory = "/tmp"
nmap <space> :<c-u>OpenSession<CR>

" vim-test
" map <Leader>mr <ESC>:python run_test()<CR>
nmap <silent> <leader>tn :TestNearest<CR><C-\><C-n>
nmap <silent> <leader>tf :TestFile<CR><C-\><C-n>
nmap <silent> <leader>ts :TestSuite<CR><C-\><C-n>
nmap <silent> <leader>tl :TestLast<CR><C-\><C-n>
nmap <silent> <leader>tv :TestVisit<CR><C-\><C-n>
let test#python#pytest#options = '-s --pdb'

" nmap <silent> <leader>m <ESC>Make test<CR>


" run interactive debug run"
map <Leader><Leader>m <ESC>:execute ':Start ' . expand(b:dispatch)<CR>


map <Leader>i oimport pdb; pdb.set_trace()  # FIXME: brakepoint<ESC>

vmap <silent> <Leader>y :<c-u>silent '<,'>w !yank<CR>

if !has('nvim') && has('clipboard')
	map <Leader>n :silent let @* = 'b ' . expand('%:p') . ':' . line('.') <bar> echo "Pdb breakpoint copied to selection buffer"<CR>
else
	map <Leader>n :echo 'b ' . expand('%:p') . ':' . line('.')<CR>
endif
map <Leader>p oimport pprint; pprint.pprint(

" ctrlp
let g:ctrlp_map = '<Nul>'
let g:ctrlp_types = ['buffertag', 'mru', 'tag']
let g:ctrlp_extensions = ['buffertag', 'tag']
let g:ctrlp_lazy_update = 1
let g:ctrlp_mruf_relative = 1
let g:ctrlp_max_height = 25
let g:ctrlp_show_hidden = 1
nnoremap ; <ESC>:CtrlPBufTag<CR>

" ctrlspace
let g:CtrlSpaceLoadLastWorkspaceOnStart = 1
let g:CtrlSpaceSaveWorkspaceOnExit = 1
let g:CtrlSpaceSaveWorkspaceOnSwitch = 1

if executable('ag')
	let g:CtrlSpaceGlobCommand = 'ag -l --hidden --nocolor -g ""'
endif

nmap <space> :<c-u>CtrlSpace<CR>
nnoremap <silent> <leader>f  :<C-u>CtrlSpace O<CR>
nnoremap <leader><space> :<c-u>CtrlSpace b<CR>

" vim-rooter

let g:rooter_use_lcd = 1
let g:rooter_patterns = ['.git', '.git/', '.tags', '.hg/', '.bzr/', '.svn/',]

" vim-surround {{{
let g:surround_{char2nr("b")} = "{% block\1 \r..*\r &\1 %}\r{% endblock %}"
let g:surround_{char2nr("i")} = "{% if\1 \r..*\r &\1 %}\r{% endif %}"
let g:surround_{char2nr("w")} = "{% with\1 \r..*\r &\1 %}\r{% endwith %}"
let g:surround_{char2nr("c")} = "{% comment\1 \r..*\r &\1 %}\r{% endcomment %}"
let g:surround_{char2nr("f")} = "{% for\1 \r..*\r &\1 %}\r{% endfor %}"
let g:surround_{char2nr("s")} = "{% static \"\r\" %}"
" }}}

" ctags
if exists("$VIRTUAL_ENV")
	set tags^=$VIRTUAL_ENV/.tags
endif

if exists("$GOPATH")
	let &tags .= ',' . split($GOPATH, ':')[-1] . '/.tags'
endif

" tjump-style tag move
" nmap g] g<C-]>
" nmap g} <c-W>g}
" nmap <Leader>r <ESC>:tag /
" nmap <Leader>rr <ESC>:vertical stag /
" nmap <Leader>j <ESC>:tjump /
" nmap <Leader>jj <ESC>:vertical stjump /
" nnoremap g<c-]> :CtrlPtjump<cr>

" fugitive, git commands
" map <Leader>gs <ESC>:Gstatus<CR>
map <Leader>gd <ESC>:Gdiff<CR>
" map <Leader>gc <ESC>:Gcommit<CR>
" map <Leader>gca <ESC>:Gcommit -a<CR>
" Git fugitive menu
noremap <Leader>g :emenu Git.<C-Z>
menu Git.Status :Gstatus<CR>
" menu Git.Diff :Gdiff<CR>
menu Git.Commit :Gcommit %<CR>
menu Git.Checkout :Gread<CR>
menu Git.Remove :Gremove<CR>
menu Git.Move :Gmove<CR>
menu Git.Log :Glog<CR>
menu Git.Blame :Gblame<CR>
"Gitv
map <Leader>gv <ESC>:Gitv<CR>
let g:Gitv_WipeAllOnClose = 1
let g:Gitv_DoNotMapCtrlKey = 0

let g:virtualenv_auto_activate = 1
let g:virtualenv_stl_format = '(%n)'

" Neomake

let g:neomake_error_sign = {'text': '✗', 'texthl': 'Special'}
let g:neomake_warning_sign = {'text': '⚠', 'texthl': 'WarningMsg'}
let g:neomake_message_sign = {'text': '➤', 'texthl': 'Todo'}
let g:neomake_info_sign = {'text': 'ℹ', 'texthl': 'Todo'}
let g:neomake_verbose = 0
let g:neomake_verbose = 0
let g:neomake_open_list = 1
let g:neomake_python_enabled_makers = ['pylama', 'mypy']
nmap <leader>lf <ESC>:lfirst<CR>
nmap <leader>ln <ESC>:lnext<CR>
nmap <leader>lo <ESC>:lopen<CR>


" Syntastic

let g:syntastic_error_symbol='✗'
let g:syntastic_style_error_symbol='✗'
let g:syntastic_warning_symbol='➤'
let g:syntastic_style_warning_symbol='➤'
let g:syntastic_python_checkers=['pylama']
let g:syntastic_ignore_files=['\m\migrations']


"Easy motion
map s <Plug>(easymotion-s)
map ы <Plug>(easymotion-s)
map t <Plug>(easymotion-bd-tl)
map f <Plug>(easymotion-bd-fl)

let g:EasyMotion_do_shade = 0
let g:EasyMotion_smartcase = 1
let g:EasyMotion_use_smartsign_us = 1

" camel case motion
call camelcasemotion#CreateMotionMappings('<leader>')

" vim-go
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_command = "goimports"

augroup filetypedetect_go
	au FileType go nmap <LocalLeader>r <Plug>(go-run)
	au FileType go nmap <LocalLeader>b <Plug>(go-build)
	au FileType go nmap <LocalLeader>t <Plug>(go-test)
	au FileType go nmap <LocalLeader>c <Plug>(go-coverage)

	" By default the mapping gd is enabled, which opens the target identifier in current buffer. You can also open the definition/declaration, in a new vertical, horizontal, or tab, for the word under your cursor:

	au FileType go nmap <LocalLeader>ds <Plug>(go-def-split)
	au FileType go nmap <LocalLeader>dv <Plug>(go-def-vertical)
	au FileType go nmap <LocalLeader>dt <Plug>(go-def-tab)

	" Open the relevant Godoc for the word under the cursor with <leader>gd or open it vertically with <leader>gv

	au FileType go nmap <LocalLeader>gd <Plug>(go-doc)
	au FileType go nmap <LocalLeader>gv <Plug>(go-doc-vertical)

	" Or open the Godoc in browser

	au FileType go nmap <LocalLeader>gb <Plug>(go-doc-browser)

	" Show a list of interfaces which is implemented by the type under your cursor with <leader>s

	au FileType go nmap <LocalLeader>s <Plug>(go-implements)

	" Show type info for the word under your cursor with <leader>i (useful if you have disabled auto showing type info via g:go_auto_type_info)

	au FileType go nmap <LocalLeader>i <Plug>(go-info)

	" Rename the identifier under the cursor to a new name

	au FileType go nmap <LocalLeader>e <Plug>(go-rename)
augroup END

let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }

" OS X hacks
" copy selection to copy buffer
command! -range Pbcopy silent '<,'>w !reattach-to-user-namespace pbcopy

" tabularize
vmap <bar> :AddTabularPipeline multiple_spaces / \{2,}/ map(a:lines, "substitute(v:val, ' \{2,}', '  ', 'g')") <bar> tabular#TabularizeStrings(a:lines, '  ', 'l0')

" VARIOUS {{{2
"tagbar
map <LocalLeader><space> :TagbarToggle<CR>
"let g:tagbar_singleclick = 1
" delimitMate
let g:delimitMate_nesting_quotes = ['"']
augroup filetype_delimitemate
	autocmd!
	autocmd FileType html,htmldjango let b:delimitMate_matchpairs = "(:),[:],{:}"
augroup END
imap <S-tab> <nop>
"let g:delimitMate_smart_quotes = 0
"let g:delimitMate_quotes = '"'
" UltiSnips
let g:UltiSnipsExpandTrigger = "<c-j>"
let g:UltiSnipsListSnippets = "<Leader>u"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:ultisnips_python_style='sphinx'

"}}}
"isort
let g:vim_isort_map = '<C-s>'
nnoremap <leader>ci <ESC>:Isort<CR>
"}}}
" Local settings
" ================
if filereadable($HOME . "/.config/nvim/.vimrc.local")
    source $HOME/.config/nvim/.vimrc.local
endif
" vim: set foldmethod=marker:
